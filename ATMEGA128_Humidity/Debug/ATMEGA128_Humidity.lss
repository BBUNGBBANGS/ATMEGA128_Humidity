
ATMEGA128_Humidity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000003a2  00000436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080010a  0080010a  00000440  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef9  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000935  00000000  00000000  00001415  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b5  00000000  00000000  00001d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00002300  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000539  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005aa  00000000  00000000  000028fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002ea7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ea       	ldi	r30, 0xA2	; 162
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 33       	cpi	r26, 0x30	; 48
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	af d0       	rcall	.+350    	; 0x222 <main>
  c4:	6c c1       	rjmp	.+728    	; 0x39e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Port_Init>:
static void MPU9250_write(char data);
static void I2C_DetectAck(unsigned char step);

void Port_Init(void)
{
    DDRA = 0xFF; //PA0~PA7 Output Direction
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
    DDRB = 0x20; //PB5 Output Direction
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	87 bb       	out	0x17, r24	; 23
    DDRD = 0x07; //PD0~2 Output Direction
  d0:	87 e0       	ldi	r24, 0x07	; 7
  d2:	81 bb       	out	0x11, r24	; 17
  d4:	08 95       	ret

000000d6 <Timer1_Init>:
}

void Timer1_Init(void)
{
    TCCR1A = 0x82;  // FAST PWM Mode
  d6:	82 e8       	ldi	r24, 0x82	; 130
  d8:	8f bd       	out	0x2f, r24	; 47
    TCCR1B = 0x1B; // FAST PWM MODE(10bit)
  da:	8b e1       	ldi	r24, 0x1B	; 27
  dc:	8e bd       	out	0x2e, r24	; 46
    ICR1 = 4999; // 2[MHz] / (1 + 39999) = 50[Hz] -> 20[ms]
  de:	87 e8       	ldi	r24, 0x87	; 135
  e0:	93 e1       	ldi	r25, 0x13	; 19
  e2:	97 bd       	out	0x27, r25	; 39
  e4:	86 bd       	out	0x26, r24	; 38
    OCR1A = 600; // 20[ms] * 0.1 : 2[ms] : Servo Motor 90[Degree]
  e6:	88 e5       	ldi	r24, 0x58	; 88
  e8:	92 e0       	ldi	r25, 0x02	; 2
  ea:	9b bd       	out	0x2b, r25	; 43
  ec:	8a bd       	out	0x2a, r24	; 42
  ee:	08 95       	ret

000000f0 <DHT11_Transmit_Request>:
	_delay_ms(10);
}

void DHT11_Transmit_Request(void)
{
	DDRD |= (1<<DHT11_PIN); // PD6 Output Setting
  f0:	81 b3       	in	r24, 0x11	; 17
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<DHT11_PIN); // PD6 Low
  f6:	82 b3       	in	r24, 0x12	; 18
  f8:	8f 7b       	andi	r24, 0xBF	; 191
  fa:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	89 ef       	ldi	r24, 0xF9	; 249
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <DHT11_Transmit_Request+0x12>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <DHT11_Transmit_Request+0x1c>
 10c:	00 00       	nop
	_delay_ms(20);
	PORTD |= (1<<DHT11_PIN); // PD6 High
 10e:	82 b3       	in	r24, 0x12	; 18
 110:	80 64       	ori	r24, 0x40	; 64
 112:	82 bb       	out	0x12, r24	; 18
 114:	08 95       	ret

00000116 <DHT11_Response>:
}

void DHT11_Response(void)
{
	DDRD &= ~(1<<DHT11_PIN); // PD6 Input Setting
 116:	81 b3       	in	r24, 0x11	; 17
 118:	8f 7b       	andi	r24, 0xBF	; 191
 11a:	81 bb       	out	0x11, r24	; 17
	while(PIND & (1<<DHT11_PIN));
 11c:	86 99       	sbic	0x10, 6	; 16
 11e:	fe cf       	rjmp	.-4      	; 0x11c <DHT11_Response+0x6>
	while((PIND & (1<<DHT11_PIN))==0);
 120:	86 9b       	sbis	0x10, 6	; 16
 122:	fe cf       	rjmp	.-4      	; 0x120 <DHT11_Response+0xa>
	while(PIND & (1<<DHT11_PIN));
 124:	86 99       	sbic	0x10, 6	; 16
 126:	fe cf       	rjmp	.-4      	; 0x124 <DHT11_Response+0xe>
}
 128:	08 95       	ret

0000012a <Receive_data>:

uint8_t Receive_data(void)
{
	uint8_t data = 0;
	for (int i = 0; i < 8; i++)
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
	while(PIND & (1<<DHT11_PIN));
}

uint8_t Receive_data(void)
{
	uint8_t data = 0;
 12e:	80 e0       	ldi	r24, 0x00	; 0
	for (int i = 0; i < 8; i++)
 130:	11 c0       	rjmp	.+34     	; 0x154 <Receive_data+0x2a>
	{
		while((PIND & (1<<DHT11_PIN)) == 0);  	/* check received bit 0 or 1 */
 132:	86 9b       	sbis	0x10, 6	; 16
 134:	fe cf       	rjmp	.-4      	; 0x132 <Receive_data+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	90 ea       	ldi	r25, 0xA0	; 160
 138:	9a 95       	dec	r25
 13a:	f1 f7       	brne	.-4      	; 0x138 <Receive_data+0xe>
		_delay_us(30);
		if(PIND & (1<<DHT11_PIN)) 				/* if high pulse is greater than 30ms */
 13c:	86 9b       	sbis	0x10, 6	; 16
 13e:	05 c0       	rjmp	.+10     	; 0x14a <Receive_data+0x20>
		{
			data = (data<<1)|(0x01);					/* then its logic HIGH */
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	81 60       	ori	r24, 0x01	; 1
 148:	01 c0       	rjmp	.+2      	; 0x14c <Receive_data+0x22>
		}
		else									/* otherwise its logic LOW */
		{
			data = (data<<1);
 14a:	88 0f       	add	r24, r24
		}

		while(PIND & (1<<DHT11_PIN));
 14c:	86 99       	sbic	0x10, 6	; 16
 14e:	fe cf       	rjmp	.-4      	; 0x14c <Receive_data+0x22>
}

uint8_t Receive_data(void)
{
	uint8_t data = 0;
	for (int i = 0; i < 8; i++)
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	3f 4f       	sbci	r19, 0xFF	; 255
 154:	28 30       	cpi	r18, 0x08	; 8
 156:	31 05       	cpc	r19, r1
 158:	64 f3       	brlt	.-40     	; 0x132 <Receive_data+0x8>
		}

		while(PIND & (1<<DHT11_PIN));
	}
	return data;
}
 15a:	08 95       	ret

0000015c <Clear_Buffer>:
    }
}

void Clear_Buffer(uint8_t index)
{
	tx_data[index] = 0;
 15c:	e8 2f       	mov	r30, r24
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	e0 5f       	subi	r30, 0xF0	; 240
 162:	fe 4f       	sbci	r31, 0xFE	; 254
 164:	10 82       	st	Z, r1
 166:	08 95       	ret

00000168 <LCD_Transmit_Command>:
}

void LCD_Transmit_Command(char cmd)
{
	cbi(LCD_CON, LCD_RS); // 0번 비트 클리어, RS = 0, 명령
 168:	92 b3       	in	r25, 0x12	; 18
 16a:	9e 7f       	andi	r25, 0xFE	; 254
 16c:	92 bb       	out	0x12, r25	; 18
	cbi(LCD_CON, LCD_RW); // 1번 비트 클리어, RW = 0, 쓰기
 16e:	92 b3       	in	r25, 0x12	; 18
 170:	9d 7f       	andi	r25, 0xFD	; 253
 172:	92 bb       	out	0x12, r25	; 18
 174:	95 e3       	ldi	r25, 0x35	; 53
 176:	9a 95       	dec	r25
 178:	f1 f7       	brne	.-4      	; 0x176 <LCD_Transmit_Command+0xe>
 17a:	00 00       	nop
	_delay_us(10);
	sbi(LCD_CON, LCD_E);  // 2번 비트 설정, E = 1
 17c:	92 b3       	in	r25, 0x12	; 18
 17e:	94 60       	ori	r25, 0x04	; 4
 180:	92 bb       	out	0x12, r25	; 18
	PORTA = cmd;          // 명령 출력
 182:	8b bb       	out	0x1b, r24	; 27
 184:	85 e3       	ldi	r24, 0x35	; 53
 186:	8a 95       	dec	r24
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_Transmit_Command+0x1e>
 18a:	00 00       	nop
	_delay_us(10);
	cbi(LCD_CON, LCD_E);  // 명령 쓰기 동작 끝
 18c:	82 b3       	in	r24, 0x12	; 18
 18e:	8b 7f       	andi	r24, 0xFB	; 251
 190:	82 bb       	out	0x12, r24	; 18
 192:	95 e3       	ldi	r25, 0x35	; 53
 194:	9a 95       	dec	r25
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_Transmit_Command+0x2c>
 198:	00 00       	nop
 19a:	08 95       	ret

0000019c <LCD_Init>:
    OCR1A = 600; // 20[ms] * 0.1 : 2[ms] : Servo Motor 90[Degree]
}

void LCD_Init(void)
{
	LCD_Transmit_Command(0x38); // Function Set , 2-Line Mode
 19c:	88 e3       	ldi	r24, 0x38	; 56
 19e:	e4 df       	rcall	.-56     	; 0x168 <LCD_Transmit_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	8f e3       	ldi	r24, 0x3F	; 63
 1a2:	9c e9       	ldi	r25, 0x9C	; 156
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_Init+0x8>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_Init+0xe>
 1aa:	00 00       	nop
	_delay_ms(10);	
	LCD_Transmit_Command(0x0C); // Display ON
 1ac:	8c e0       	ldi	r24, 0x0C	; 12
 1ae:	dc df       	rcall	.-72     	; 0x168 <LCD_Transmit_Command>
 1b0:	8f e3       	ldi	r24, 0x3F	; 63
 1b2:	9c e9       	ldi	r25, 0x9C	; 156
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCD_Init+0x18>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LCD_Init+0x1e>
	_delay_ms(10);
	LCD_Transmit_Command(0x06); // Increment Mode
 1ba:	00 00       	nop
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	d4 df       	rcall	.-88     	; 0x168 <LCD_Transmit_Command>
 1c0:	8f e3       	ldi	r24, 0x3F	; 63
 1c2:	9c e9       	ldi	r25, 0x9C	; 156
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCD_Init+0x28>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LCD_Init+0x2e>
	_delay_ms(10);
	LCD_Transmit_Command(0x01); // Display Clear
 1ca:	00 00       	nop
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	cc df       	rcall	.-104    	; 0x168 <LCD_Transmit_Command>
 1d0:	8f e3       	ldi	r24, 0x3F	; 63
 1d2:	9c e9       	ldi	r25, 0x9C	; 156
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_Init+0x38>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_Init+0x3e>
 1da:	00 00       	nop
 1dc:	08 95       	ret

000001de <LCD_Cursor>:
	_delay_us(10);
}

void LCD_Cursor(char col, char row)
{
	LCD_Transmit_Command(0x80 | (row + col * 0x40));
 1de:	90 e4       	ldi	r25, 0x40	; 64
 1e0:	89 9f       	mul	r24, r25
 1e2:	60 0d       	add	r22, r0
 1e4:	11 24       	eor	r1, r1
 1e6:	86 2f       	mov	r24, r22
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	be cf       	rjmp	.-132    	; 0x168 <LCD_Transmit_Command>
 1ec:	08 95       	ret

000001ee <LCD_Transmit_Data>:
}

void LCD_Transmit_Data(char data)
{
	sbi(LCD_CON, LCD_RS);
 1ee:	92 b3       	in	r25, 0x12	; 18
 1f0:	91 60       	ori	r25, 0x01	; 1
 1f2:	92 bb       	out	0x12, r25	; 18
	cbi(LCD_CON, LCD_RW);
 1f4:	92 b3       	in	r25, 0x12	; 18
 1f6:	9d 7f       	andi	r25, 0xFD	; 253
 1f8:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	95 e3       	ldi	r25, 0x35	; 53
 1fc:	9a 95       	dec	r25
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_Transmit_Data+0xe>
 200:	00 00       	nop
	_delay_us(10);
	sbi(LCD_CON, LCD_E);
 202:	92 b3       	in	r25, 0x12	; 18
 204:	94 60       	ori	r25, 0x04	; 4
 206:	92 bb       	out	0x12, r25	; 18
	LCD_DATA = data;
 208:	8b bb       	out	0x1b, r24	; 27
 20a:	85 e3       	ldi	r24, 0x35	; 53
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <LCD_Transmit_Data+0x1e>
 210:	00 00       	nop
	_delay_us(10);
	cbi(LCD_CON, LCD_E);
 212:	82 b3       	in	r24, 0x12	; 18
 214:	8b 7f       	andi	r24, 0xFB	; 251
 216:	82 bb       	out	0x12, r24	; 18
 218:	95 e3       	ldi	r25, 0x35	; 53
 21a:	9a 95       	dec	r25
 21c:	f1 f7       	brne	.-4      	; 0x21a <LCD_Transmit_Data+0x2c>
 21e:	00 00       	nop
 220:	08 95       	ret

00000222 <main>:
	uint8_t length = 0;
	uint8_t n1,n10,n100;
	char Humidity;
	char temperature;

    Port_Init();
 222:	52 df       	rcall	.-348    	; 0xc8 <Port_Init>
	Timer1_Init();
 224:	58 df       	rcall	.-336    	; 0xd6 <Timer1_Init>
    LCD_Init();
 226:	ba df       	rcall	.-140    	; 0x19c <LCD_Init>

    while (1) 
    {

        DHT11_Transmit_Request(); //DHT11 data Transmit Reqeust
 228:	63 df       	rcall	.-314    	; 0xf0 <DHT11_Transmit_Request>
 22a:	75 df       	rcall	.-278    	; 0x116 <DHT11_Response>
        DHT11_Response(); //DHT11 Response holding
 22c:	7e df       	rcall	.-260    	; 0x12a <Receive_data>

        DHT11_I_RH = Receive_data();
 22e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <DHT11_I_RH>
 232:	7b df       	rcall	.-266    	; 0x12a <Receive_data>
        DHT11_D_RH = Receive_data();
 234:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <DHT11_D_RH>
 238:	78 df       	rcall	.-272    	; 0x12a <Receive_data>
        DHT11_I_TEMP = Receive_data();
 23a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <DHT11_I_TEMP>
 23e:	75 df       	rcall	.-278    	; 0x12a <Receive_data>
 240:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
        DHT11_D_TEMP = Receive_data();
 244:	72 df       	rcall	.-284    	; 0x12a <Receive_data>
 246:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <DHT11_CheckSum>
        DHT11_CheckSum = Receive_data();
 24a:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <DHT11_I_RH>
 24e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <DHT11_D_RH>
		
        Calc_CheckSum = DHT11_I_RH + DHT11_D_RH + DHT11_I_TEMP + DHT11_D_TEMP;
 252:	92 0f       	add	r25, r18
 254:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <DHT11_I_TEMP>
 258:	92 0f       	add	r25, r18
 25a:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 25e:	92 0f       	add	r25, r18
 260:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <Calc_CheckSum>
 264:	89 13       	cpse	r24, r25
 266:	91 c0       	rjmp	.+290    	; 0x38a <main+0x168>
 268:	04 c0       	rjmp	.+8      	; 0x272 <main+0x50>

        if(Calc_CheckSum == DHT11_CheckSum)
 26a:	8c 2f       	mov	r24, r28
 26c:	77 df       	rcall	.-274    	; 0x15c <Clear_Buffer>
 26e:	21 96       	adiw	r28, 0x01	; 1
        {		
			length = 0;
			/* Buffer 초기화 */
			for(int i = 0; i<32;i++)
			{
				Clear_Buffer(i);
 270:	02 c0       	rjmp	.+4      	; 0x276 <main+0x54>
 272:	c0 e0       	ldi	r28, 0x00	; 0

        if(Calc_CheckSum == DHT11_CheckSum)
        {		
			length = 0;
			/* Buffer 초기화 */
			for(int i = 0; i<32;i++)
 274:	d0 e0       	ldi	r29, 0x00	; 0
 276:	c0 32       	cpi	r28, 0x20	; 32
 278:	d1 05       	cpc	r29, r1
 27a:	bc f3       	brlt	.-18     	; 0x26a <main+0x48>
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	ae df       	rcall	.-164    	; 0x1de <LCD_Cursor>
			{
				Clear_Buffer(i);
			}
			/* 1행 첫번째 커서 위치 */
			LCD_Cursor(0,0);
 282:	89 e0       	ldi	r24, 0x09	; 9
 284:	e0 e0       	ldi	r30, 0x00	; 0
 286:	f1 e0       	ldi	r31, 0x01	; 1
 288:	a0 e1       	ldi	r26, 0x10	; 16
			/* Tx Buffer에 습도 값 넣기 */
			sprintf(&tx_data[length],"Humid : ");
 28a:	b1 e0       	ldi	r27, 0x01	; 1
 28c:	01 90       	ld	r0, Z+
 28e:	0d 92       	st	X+, r0
 290:	8a 95       	dec	r24
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x6a>
 294:	e0 e1       	ldi	r30, 0x10	; 16
 296:	f1 e0       	ldi	r31, 0x01	; 1
 298:	01 90       	ld	r0, Z+
 29a:	00 20       	and	r0, r0
			length = strlen(tx_data);
 29c:	e9 f7       	brne	.-6      	; 0x298 <main+0x76>
 29e:	31 97       	sbiw	r30, 0x01	; 1
 2a0:	cf 01       	movw	r24, r30
 2a2:	80 51       	subi	r24, 0x10	; 16
 2a4:	91 40       	sbci	r25, 0x01	; 1
 2a6:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <DHT11_I_RH>
 2aa:	59 e2       	ldi	r21, 0x29	; 41
 2ac:	75 9f       	mul	r23, r21
			n100 = (DHT11_I_RH / 100) % 10;
 2ae:	51 2d       	mov	r21, r1
 2b0:	11 24       	eor	r1, r1
 2b2:	2d ec       	ldi	r18, 0xCD	; 205
 2b4:	52 95       	swap	r21
 2b6:	5f 70       	andi	r21, 0x0F	; 15
 2b8:	72 9f       	mul	r23, r18
 2ba:	41 2d       	mov	r20, r1
 2bc:	11 24       	eor	r1, r1
 2be:	46 95       	lsr	r20
			n10 = (DHT11_I_RH / 10) % 10;
 2c0:	46 95       	lsr	r20
 2c2:	46 95       	lsr	r20
 2c4:	42 9f       	mul	r20, r18
 2c6:	31 2d       	mov	r19, r1
 2c8:	11 24       	eor	r1, r1
 2ca:	36 95       	lsr	r19
 2cc:	36 95       	lsr	r19
 2ce:	36 95       	lsr	r19
 2d0:	33 0f       	add	r19, r19
 2d2:	63 2f       	mov	r22, r19
 2d4:	66 0f       	add	r22, r22
 2d6:	66 0f       	add	r22, r22
 2d8:	36 0f       	add	r19, r22
 2da:	64 2f       	mov	r22, r20
 2dc:	63 1b       	sub	r22, r19
 2de:	36 2f       	mov	r19, r22
 2e0:	44 0f       	add	r20, r20
 2e2:	64 2f       	mov	r22, r20
 2e4:	66 0f       	add	r22, r22
 2e6:	66 0f       	add	r22, r22
			n1 = (DHT11_I_RH % 10);
 2e8:	46 0f       	add	r20, r22
 2ea:	67 2f       	mov	r22, r23
 2ec:	64 1b       	sub	r22, r20
 2ee:	fc 01       	movw	r30, r24
 2f0:	ff 27       	eor	r31, r31
 2f2:	e0 5f       	subi	r30, 0xF0	; 240
 2f4:	fe 4f       	sbci	r31, 0xFE	; 254
			tx_data[length] = n100 + 0x30; // 숫자를 ASCII로 변경
 2f6:	90 e3       	ldi	r25, 0x30	; 48
 2f8:	95 0f       	add	r25, r21
 2fa:	90 83       	st	Z, r25
 2fc:	e1 e0       	ldi	r30, 0x01	; 1
 2fe:	e8 0f       	add	r30, r24
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	e0 5f       	subi	r30, 0xF0	; 240
			length = length + 1;
 304:	fe 4f       	sbci	r31, 0xFE	; 254
 306:	30 5d       	subi	r19, 0xD0	; 208
			tx_data[length] = n10 + 0x30; // 숫자를 ASCII로 변경
 308:	30 83       	st	Z, r19
 30a:	e2 e0       	ldi	r30, 0x02	; 2
 30c:	e8 0f       	add	r30, r24
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	e0 5f       	subi	r30, 0xF0	; 240
			length = length + 1;
 312:	fe 4f       	sbci	r31, 0xFE	; 254
 314:	60 5d       	subi	r22, 0xD0	; 208
			tx_data[length] = n1 + 0x30; // 숫자를 ASCII로 변경
 316:	60 83       	st	Z, r22
 318:	e3 e0       	ldi	r30, 0x03	; 3
 31a:	e8 0f       	add	r30, r24
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	e0 5f       	subi	r30, 0xF0	; 240
			length = length + 1;
 320:	fe 4f       	sbci	r31, 0xFE	; 254
 322:	9e e2       	ldi	r25, 0x2E	; 46
			tx_data[length] = '.'; 
 324:	90 83       	st	Z, r25
 326:	e4 e0       	ldi	r30, 0x04	; 4
 328:	e8 0f       	add	r30, r24
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	e0 5f       	subi	r30, 0xF0	; 240
			length = length + 1;			
 32e:	fe 4f       	sbci	r31, 0xFE	; 254
 330:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <DHT11_D_RH>
			tx_data[length] = (DHT11_D_RH % 10) + 0x30; 
 334:	92 9f       	mul	r25, r18
 336:	21 2d       	mov	r18, r1
 338:	11 24       	eor	r1, r1
 33a:	26 95       	lsr	r18
 33c:	26 95       	lsr	r18
 33e:	26 95       	lsr	r18
 340:	22 0f       	add	r18, r18
 342:	32 2f       	mov	r19, r18
 344:	33 0f       	add	r19, r19
 346:	33 0f       	add	r19, r19
 348:	23 0f       	add	r18, r19
 34a:	92 1b       	sub	r25, r18
 34c:	90 5d       	subi	r25, 0xD0	; 208
 34e:	90 83       	st	Z, r25
 350:	15 e0       	ldi	r17, 0x05	; 5
 352:	18 0f       	add	r17, r24
 354:	c0 e0       	ldi	r28, 0x00	; 0
			length = length + 1;
 356:	d0 e0       	ldi	r29, 0x00	; 0
 358:	06 c0       	rjmp	.+12     	; 0x366 <main+0x144>
			for(int i = 0;i<length;i++)
 35a:	fe 01       	movw	r30, r28
 35c:	e0 5f       	subi	r30, 0xF0	; 240
 35e:	fe 4f       	sbci	r31, 0xFE	; 254
			{
				/* Tx buffer 출력 */
				LCD_Transmit_Data(tx_data[i]);
 360:	80 81       	ld	r24, Z
 362:	45 df       	rcall	.-374    	; 0x1ee <LCD_Transmit_Data>
 364:	21 96       	adiw	r28, 0x01	; 1
 366:	81 2f       	mov	r24, r17
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	c8 17       	cp	r28, r24
			length = length + 1;
			tx_data[length] = '.'; 
			length = length + 1;			
			tx_data[length] = (DHT11_D_RH % 10) + 0x30; 
			length = length + 1;
			for(int i = 0;i<length;i++)
 36c:	d9 07       	cpc	r29, r25
 36e:	ac f3       	brlt	.-22     	; 0x35a <main+0x138>
 370:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <DHT11_I_RH>
 374:	88 32       	cpi	r24, 0x28	; 40
 376:	28 f0       	brcs	.+10     	; 0x382 <main+0x160>
			{
				/* Tx buffer 출력 */
				LCD_Transmit_Data(tx_data[i]);
			}
			#endif
            if( DHT11_I_RH >= 40)		
 378:	87 e7       	ldi	r24, 0x77	; 119
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	9b bd       	out	0x2b, r25	; 43
 37e:	8a bd       	out	0x2a, r24	; 42
            {
                OCR1A = 375; // 20[ms] * 0.075 : 1.5[ms]  ==> Servo Motor 0[Degree]
 380:	04 c0       	rjmp	.+8      	; 0x38a <main+0x168>
 382:	88 e5       	ldi	r24, 0x58	; 88
 384:	92 e0       	ldi	r25, 0x02	; 2
 386:	9b bd       	out	0x2b, r25	; 43
 388:	8a bd       	out	0x2a, r24	; 42
            }
            else
            {
                OCR1A = 600; // 20[ms] * 0.1 : 2[ms] : Servo Motor 90[Degree]
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	99 e6       	ldi	r25, 0x69	; 105
 38e:	28 e1       	ldi	r18, 0x18	; 24
 390:	81 50       	subi	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	20 40       	sbci	r18, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <main+0x16e>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0x178>
 39a:	00 00       	nop
 39c:	45 cf       	rjmp	.-374    	; 0x228 <main+0x6>

0000039e <_exit>:
 39e:	f8 94       	cli

000003a0 <__stop_program>:
 3a0:	ff cf       	rjmp	.-2      	; 0x3a0 <__stop_program>
